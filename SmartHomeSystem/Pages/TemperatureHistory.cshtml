@page
@model SmartHomeSystem.Pages.TemperatureHistoryModel
@{
	ViewData["Title"] = "Temperature History";
}

<div class="mx-auto max-w-3xl space-y-8 px-4 py-6 text-gray-800 dark:text-gray-100">
	<h1 class="text-center text-3xl font-semibold">Temperature History</h1>

	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Last 24 Hours</h2>
		<div class="card-body">
			<div id="temperatureChart"></div>
		</div>
	</section>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
	<script>
		const temperatures =@Html.Raw(Json.Serialize(Model.Temperatures.Select(t => new
			{
				value = t.Value,
				timestamp = t.Timestamp.ToString("yyyy-MM-ddTHH:mm:ss.fffzzz")
			})))
		console.log('Temperatures:', temperatures);

		// Use the timestamps directly since they're already in local time
		const timestamps = temperatures.map(item => new Date(item.timestamp).getTime());
		const values = temperatures.map(item => item.value);
		console.log('Timestamps:', timestamps);
		// Function to check if dark mode is enabled
		function isDarkMode() {
			return document.documentElement.classList.contains('dark');
		}

		// Function to get the appropriate text color
		function getTextColor() {
			return isDarkMode() ? '#ffffff' : '#374151'; // white for dark mode, gray-700 for light mode
		}

		const options = {
			series: [{
				name: 'Temperature',
				data: values.map((value, index) => ({
					x: timestamps[index],
					y: value
				}))
			}],
			chart: {
				type: 'line',
				height: 350,
				animations: {
					enabled: true
				},
				toolbar: {
					show: true,
					tools: {
						zoom: true,
						zoomin: true,
						zoomout: true,
						pan: true,
						reset: true
					}
				},
				zoom: {
					enabled: true,
					type: 'xy'
				},
				background: isDarkMode() ? '#1F2937' : '#FFFFFF'
			},
			stroke: {
				curve: 'smooth',
				width: 2
			},
			colors: ['#4BC0C0'],
			fill: {
				type: 'none'
			},
			xaxis: {
				type: 'datetime',
				title: {
					text: 'Time',
					style: {
						color: getTextColor()
					}
				},
				labels: {
					datetimeUTC: false,
					style: {
						colors: getTextColor()
					},
					datetimeFormatter: {
						hour: 'HH:mm'
					}
				}
			},
			yaxis: {
				title: {
					text: 'Temperature (°C)',
					style: {
						color: getTextColor()
					}
				},
				labels: {
					style: {
						colors: getTextColor()
					}
				}
			},
			tooltip: {
				x: {
					format: 'HH:mm'
				}
			},
			theme: {
				mode: isDarkMode() ? 'dark' : 'light',
				palette: 'palette1'
			}
		};

		const chart = new ApexCharts(document.querySelector("#temperatureChart"), options);
		chart.render();

		// Update chart colors when dark mode changes
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.attributeName === 'class') {
					const textColor = getTextColor();
					chart.updateOptions({
						theme: {
							mode: isDarkMode() ? 'dark' : 'light',
							palette: 'palette1'
						},
						chart: {
							background: isDarkMode() ? '#1F2937' : '#FFFFFF'
						},
						xaxis: {
							title: {
								style: {
									color: textColor
								}
							},
							labels: {
								style: {
									colors: textColor
								}
							}
						},
						yaxis: {
							title: {
								style: {
									color: textColor
								}
							},
							labels: {
								style: {
									colors: textColor
								}
							}
						}
					});
				}
			});
		});

		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ['class']
		});
	</script>
}