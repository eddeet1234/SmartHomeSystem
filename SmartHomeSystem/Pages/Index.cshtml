@page
@model IndexModel

<div class="absolute left-4 right-20 top-2 flex justify-between">
	<form method="post" asp-page-handler="ToggleStatus">
		<button type="submit" class="@(Model.IsHome ? "btn-primary" : "btn-secondary") inline-flex h-7 items-center rounded-lg px-4">
			@(Model.IsHome ? "Home" : "Away")
		</button>
	</form>

	@if (Model.UserEmail == "Not signed in")
	{
		<div class="flex justify-start">
			<a asp-page="/Index" asp-page-handler="Signin" class="btn-primary inline-flex h-7 items-center rounded-lg px-4">
				Sign in with Google
			</a>
		</div>
	}
	else
	{
		<div class="group flex-col justify-start">
			<a class="btn-primary inline-flex h-7 items-center rounded-lg px-4">
				@Model.UserEmail
			</a>

			<div class="group-hover:block mr-4 mt-2 hidden rounded-lg bg-white shadow-lg dark:bg-gray-900">
				<a asp-page="/Index" asp-page-handler="SignOut"
				   class="block rounded-lg px-4 py-2 text-gray-700 hover:bg-gray-100 dark:text-gray-200 dark:hover:bg-gray-800">
					Sign out
				</a>
			</div>
		</div>
	}
</div>

<div class="mx-auto max-w-3xl space-y-8 px-4 py-6 text-gray-800 dark:text-gray-100">
	<h1 class="text-center text-3xl font-semibold">Smart Home Dashboard</h1>

	<!-- ESP32 Light Control -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">ESP32 Light Control</h2>
		<div class="flex flex-wrap justify-center gap-4">
			<form method="post" asp-page-handler="TurnOn">
				<button class="btn-primary">Turn Light ON</button>
			</form>
			<form method="post" asp-page-handler="TurnOff">
				<button class="btn-secondary">Turn Light OFF</button>
			</form>
			<form method="post" asp-page-handler="ThirtyMinTimer">
				<button class="btn-outline">30-Minute Timer</button>
			</form>
		</div>
	</section>

	<!-- Light Schedule -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Schedule Light</h2>
		<form method="post" asp-page-handler="Schedule" class="space-y-4">
			<div class="flex flex-col">
				<label class="text-sm font-medium text-gray-600 dark:text-gray-300">On Time</label>
				<input type="time" asp-for="OnTime" required class="input" />
			</div>
			<div class="flex flex-col">
				<label class="text-sm font-medium text-gray-600 dark:text-gray-300">Off Time (optional)</label>
				<input type="time" asp-for="OffTime" class="input" />
			</div>
			<button class="btn-primary w-full">Schedule</button>
		</form>

		@if (Model.LightSchedules?.Any() == true)
		{
			<div class="pt-4">
				<h3 class="text-lg font-semibold text-gray-700 dark:text-gray-100">Light Schedules</h3>
				<ul class="divide-y divide-gray-200 dark:divide-gray-700">
					@foreach (var schedule in Model.LightSchedules)
					{
						<li class="flex items-center justify-between py-2">
							<span>
								On at: @schedule.OnTime.ToString(@"hh\:mm")
								@if (schedule.OffTime.HasValue)
								{
									<span> - Off at: @schedule.OffTime.Value.ToString(@"hh\:mm")</span>
								}
							</span>
							<div class="flex flex-col space-y-2 sm:flex-row sm:justify-end sm:space-y-0 sm:space-x-2">
								<a class="inline-flex items-center gap-1 text-blue-600 hover:underline" href="/EditLightSchedule?id=@schedule.Id">
									<i data-lucide="pencil" class="h-4 w-4"></i>
									<span>Edit</span>
								</a>
								<form method="post" asp-page-handler="DeleteSchedule" asp-route-id="@schedule.Id" class="inline">
									<button type="submit" onclick="return confirm('Delete this schedule?')" class="inline-flex items-center gap-1 border-none bg-transparent text-red-600 hover:underline">
										<i data-lucide="trash-2" class="h-4 w-4"></i>
										<span>Delete</span>
									</button>
								</form>
							</div>
						</li>
					}
				</ul>
			</div>
		}
	</section>

	<!-- Ceiling Light -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Ceiling Light</h2>
		<form method="post" asp-page-handler="ToggleCeilingLight">
			<button class="btn-primary w-full">Toggle Ceiling Light</button>
		</form>
	</section>

	<!-- Alarm Clock -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Alarm Clock</h2>
		<form method="post" asp-page-handler="AddAlarm" class="space-y-4">
			<div class="flex flex-col">
				<label class="text-sm font-medium text-gray-600 dark:text-gray-300">Alarm Time</label>
				<input type="datetime-local" asp-for="NewAlarmTime" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" required class="input" />
			</div>
			<div class="flex flex-col">
				<label class="text-sm font-medium text-gray-600 dark:text-gray-300">Label</label>
				<input type="text" asp-for="NewAlarmLabel" required class="input" />
			</div>
			<div class="flex items-center gap-2">
				<input type="checkbox" asp-for="NewAlarmRepeat" class="rounded border-gray-300 dark:border-gray-600" />
				<label class="text-sm font-medium text-gray-600 dark:text-gray-300">Repeat Daily</label>
			</div>
			<button class="btn-primary w-full">Set Alarm</button>
		</form>

		@if (Model.Alarms?.Any() == true)
		{
			<div class="pt-4">
				<h3 class="text-lg font-semibold text-gray-700 dark:text-gray-100">Upcoming Alarms</h3>
				<ul class="divide-y divide-gray-200 dark:divide-gray-700">
					@foreach (var alarm in Model.Alarms)
					{
						<li class="flex items-center justify-between py-2">
							<span>
								@alarm.Time.ToLocalTime(): @alarm.Label
								@if (alarm.RepeatDaily)
								{
									<span class="text-xs text-gray-500 dark:text-gray-400">(Repeats Daily)</span>
								}
							</span>
							<div class="flex flex-col space-y-2 sm:flex-row sm:justify-end sm:space-y-0 sm:space-x-2">
								<a class="inline-flex items-center gap-1 text-blue-600 hover:underline" href="/EditAlarm?id=@alarm.Id">
									<i data-lucide="pencil" class="h-4 w-4"></i>
									<span>Edit</span>
								</a>
								<form method="post" asp-page-handler="DeleteAlarm" asp-route-id="@alarm.Id" class="inline">
									<button type="submit" onclick="return confirm('Delete this alarm?')" class="inline-flex items-center gap-1 border-none bg-transparent text-red-600 hover:underline">
										<i data-lucide="trash-2" class="h-4 w-4"></i>
										<span>Delete</span>
									</button>
								</form>
							</div>
						</li>
					}
				</ul>
			</div>
		}
	</section>

	<!-- Stop Alarm Button -->
	<div id="stopAlarmContainer" class="hidden rounded-xl bg-red-100 p-4 text-center shadow-md dark:bg-red-900">
		<form method="post" asp-page-handler="StopAlarm">
			<button class="btn-secondary flex w-full items-center justify-center gap-2">
				<i data-lucide="alarm-clock" class="h-5 w-5"></i>
				Stop Alarm (<span id="alarmDuration">0</span>s)
			</button>
		</form>
	</div>

	<!-- Temperature Monitoring -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<div class="flex justify-between items-center">
			<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Temperature Monitoring</h2>
			<a href="/TemperatureHistory" class="inline-flex items-center gap-2 rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600">
				<i data-lucide="line-chart" class="h-4 w-4"></i>
				View Graph
			</a>
		</div>
		@if (Model.LatestTemperature != null)
		{
			<div class="flex items-center justify-between">
				<div>
					<p class="text-3xl font-bold">@Model.LatestTemperature.Value.ToString("F1")°C</p>
					<p class="text-sm text-gray-600 dark:text-gray-400">
						Last updated: @Model.LatestTemperature.Timestamp.ToString("g")
					</p>
				</div>
				<div class="text-right">
					@if (Model.TemperatureHistory?.Any() == true)
					{
						<p class="text-sm text-gray-600 dark:text-gray-400">
							Min: @Model.TemperatureHistory.Min(t => t.Value).ToString("F1")°C
						</p>
						<p class="text-sm text-gray-600 dark:text-gray-400">
							Max: @Model.TemperatureHistory.Max(t => t.Value).ToString("F1")°C
						</p>
					}
				</div>
			</div>
		}
		else
		{
			<p class="text-gray-600 dark:text-gray-400">No temperature data available</p>
		}
	</section>

	<!-- Google Tasks Section -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<div class="flex justify-between">
			<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Google Tasks</h2>
			<audio id="taskAudio" class="hidden">
				@if (!string.IsNullOrEmpty(Model.AudioUrlTasks))
				{
					<source src="@Model.AudioUrlTasks" type="audio/mpeg">
				}
				Your browser does not support the audio element.
			</audio>
			<button id="playPauseBtn" class="inline-flex items-center justify-center rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-800 @(string.IsNullOrEmpty(Model.AudioUrlTasks) ? "opacity-50 cursor-not-allowed" : "")" @(string.IsNullOrEmpty(Model.AudioUrlTasks) ? "disabled" : "")>
				<i data-lucide="play" class="h-5 w-5"></i>
			</button>
		</div>
		@if (!string.IsNullOrEmpty(Model.TasksErrorMessage))
		{
			<div class="alert alert-danger">
				@Model.TasksErrorMessage
			</div>
		}
		@if (Model.TasksByList?.Count == 0)
		{
			<p class="text-gray-600 dark:text-gray-400">No tasks lists were found or not signed in.</p>
		}
		else
		{

			foreach (var list in Model.TasksByList)
			{
				<div class="mt-4">
					<h3 class="text-lg font-semibold text-gray-700 dark:text-gray-100">@list.Key</h3>
					<ul class="mt-2 space-y-2">
						@if (list.Value.Count == 0)
						{
							<li class="p-3">
								<div class="font-medium">No tasks found...</div>
							</li>
						}
						else
						{
							@foreach (var task in list.Value)
							{
								<li class="rounded-lg bg-gray-50 p-3 dark:bg-gray-800">
									<div class="font-medium">@task.Title</div>
									@if (!string.IsNullOrWhiteSpace(task.Notes))
									{
										<div class="mt-1 text-sm text-gray-600 dark:text-gray-400">@task.Notes</div>
									}
									<div class="mt-2 text-sm">
										@*<span class="@(task.Status == "completed" ? "text-green-600" : "text-blue-600")">
										Status: @task.Status
									</span>*@
										@if (task.Due != null)
										{
											<span class="ml-4 text-gray-600 dark:text-gray-400">
												Due: @task.Due.Value.ToString("yyyy-MM-dd")
											</span>
										}
									</div>
								</li>
							}
						}
					</ul>
				</div>
			}

		}
	</section>

	<!-- Google Calendar Section -->
	<section class="space-y-4 rounded-2xl bg-white p-6 shadow-md dark:bg-gray-900">
		<div class="flex justify-between">
			<h2 class="text-xl font-bold text-gray-700 dark:text-gray-100">Google Calendar</h2>
			<audio id="calendarAudio" class="hidden">
				@if (!string.IsNullOrEmpty(Model.AudioUrlCalendar))
				{
					<source src="@Model.AudioUrlCalendar" type="audio/mpeg">
				}
				Your browser does not support the audio element.
			</audio>
			<button id="playPauseCalendarBtn" class="inline-flex items-center justify-center rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-800 @(string.IsNullOrEmpty(Model.AudioUrlCalendar) ? "opacity-50 cursor-not-allowed" : "")" @(string.IsNullOrEmpty(Model.AudioUrlCalendar) ? "disabled" : "")>
				<i data-lucide="play" class="h-5 w-5"></i>
			</button>
		</div>
		@if (!string.IsNullOrEmpty(Model.CalendarErrorMessage))
		{
			<div class="alert alert-danger">
				@Model.CalendarErrorMessage
			</div>
		}
		@if (Model.CalendarEvents?.Count == 0)
		{
			<p class="text-gray-600 dark:text-gray-400">No upcoming events found or not signed in.</p>
		}
		else
		{
			<div class="mt-4">
				<ul class="mt-2 space-y-2">
					@foreach (var evt in Model.CalendarEvents)
					{
						<li class="rounded-lg bg-gray-50 p-3 dark:bg-gray-800">
							<div class="font-medium">@evt.Title</div>
							@if (!string.IsNullOrWhiteSpace(evt.Description))
							{
								<div class="mt-1 text-sm text-gray-600 dark:text-gray-400">@evt.Description</div>
							}
							@if (!string.IsNullOrWhiteSpace(evt.Location))
							{
								<div class="mt-1 text-sm text-gray-600 dark:text-gray-400">
									<i data-lucide="map-pin" class="inline h-4 w-4"></i> @evt.Location
								</div>
							}
							<div class="mt-2 text-sm text-gray-600 dark:text-gray-400">
								@if (!evt.IsAllDay)
								{
									<span>
										@evt.Start.ToLocalTime().ToString("MMM dd, yyyy HH:mm") -
										@evt.End.ToLocalTime().ToString("HH:mm")
									</span>
								}
								else
								{
									<span>All day: @evt.Start.ToString("MMM dd, yyyy")</span>
								}
								@if (evt.Status != "confirmed")
								{
									<span class="ml-2 rounded-full bg-yellow-100 px-2 py-1 text-xs text-yellow-800">
										@evt.Status
									</span>
								}
							</div>
							@if (!string.IsNullOrEmpty(evt.HtmlLink))
							{
								<div class="mt-2">
									<a href="@evt.HtmlLink" target="_blank" class="text-sm text-blue-600 hover:underline">
										<i data-lucide="external-link" class="inline h-4 w-4"></i> View in Calendar
									</a>
								</div>
							}
						</li>
					}
				</ul>
			</div>
		}
	</section>

</div>

@section Scripts {
	<script>
		//function to check if the alarm is playing
		async function checkAlarmStatus() {
			const response = await fetch('/Index?handler=AlarmStatus');
			const isPlaying = await response.json();
			const container = document.getElementById('stopAlarmContainer');
			container.style.display = isPlaying ? 'block' : 'none';

			if (isPlaying) {
				const durationResponse = await fetch('/Index?handler=AlarmDuration');
				const duration = await durationResponse.json();
				document.getElementById('alarmDuration').textContent = duration;
			}

			lucide.createIcons(); // refresh icons
		}

		checkAlarmStatus();

		setInterval(checkAlarmStatus, 1000); // Check alarm status every second

		lucide.createIcons(); // initial icon render

		//function to play and pause the task audio
		const audio = document.getElementById('taskAudio');
		const playPauseBtn = document.getElementById('playPauseBtn');
		const playIcon = `<i data-lucide="play" class="h-5 w-5"></i>`;
		const pauseIcon = `<i data-lucide="pause" class="h-5 w-5"></i>`;

		playPauseBtn.addEventListener('click', () => {
			if (audio.paused) {
				audio.play();
				playPauseBtn.innerHTML = pauseIcon;
			} else {
				audio.pause();
				playPauseBtn.innerHTML = playIcon;
			}
			lucide.createIcons();
		});

		// Update icon when audio ends
		audio.addEventListener('ended', () => {
			playPauseBtn.innerHTML = playIcon;
			lucide.createIcons();
		});

		// Calendar audio controls
		const calendarAudio = document.getElementById('calendarAudio');
		const playPauseCalendarBtn = document.getElementById('playPauseCalendarBtn');
		const calendarPlayIcon = `<i data-lucide="play" class="h-5 w-5"></i>`;
		const calendarPauseIcon = `<i data-lucide="pause" class="h-5 w-5"></i>`;

		playPauseCalendarBtn.addEventListener('click', () => {
			if (calendarAudio.paused) {
				calendarAudio.play();
				playPauseCalendarBtn.innerHTML = calendarPauseIcon;
			} else {
				calendarAudio.pause();
				playPauseCalendarBtn.innerHTML = calendarPlayIcon;
			}
			lucide.createIcons();
		});

		// Update icon when calendar audio ends
		calendarAudio.addEventListener('ended', () => {
			playPauseCalendarBtn.innerHTML = calendarPlayIcon;
			lucide.createIcons();
		});
	</script>
}
